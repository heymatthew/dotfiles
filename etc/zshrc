# .zshrc configuration file
# Copyright (C) 2016 Matthew B. Gray
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Locale
export LANG=en_US
export LC_CTYPE=$LANG.UTF-8

# General shell options
fpath=(/usr/local/share/zsh/site-functions $fpath)

cdpath=(~/Projects ~ ~/Desktop ~/Projects/External)

setopt CORRECT MULTIOS NO_HUP NO_CHECK_JOBS EXTENDED_GLOB

export HISTSIZE=2000
export HISTFILE="$HOME/.zsh_history"
export SAVEHIST=$HISTSIZE

setopt hist_ignore_all_dups # when running a command again, removes previous refs to it
setopt hist_save_no_dups    # kill duplicates on save
setopt hist_ignore_space    # prefixed with space doesn't store command

setopt hist_no_store      # don't store the command history in history
setopt hist_verify        # when using history expansion, reload history
setopt inc_append_history # write after exec rather than waiting till shell exit
setopt no_hist_beep       # no terminal bell please
setopt share_history      # all open shells see history


## Completion
setopt NO_BEEP AUTO_LIST AUTO_MENU
autoload -U compinit
compinit

# Bash-like navigation, http://stackoverflow.com/questions/10847255
autoload -U select-word-style
select-word-style bash

##############################################################################
# Misc tricks from
# http://chneukirchen.org/blog/archive/2013/03/10-fresh-zsh-tricks-you-may-not-know.html
autoload -Uz copy-earlier-word
zle -N copy-earlier-word
bindkey "^[m" copy-earlier-word

function _recover_line_or_else() {
  if [[ -z $BUFFER && $CONTEXT = start && $zsh_eval_context = shfunc
      && -n $ZLE_LINE_ABORTED
      && $ZLE_LINE_ABORTED != $history[$((HISTCMD-1))] ]]; then
    LBUFFER+=$ZLE_LINE_ABORTED
    unset ZLE_LINE_ABORTED
  else
  zle .$WIDGET
  fi
}
zle -N up-line-or-history _recover_line_or_else
function _zle_line_finish() {
  ZLE_LINE_ABORTED=$BUFFER
}
zle -N zle-line-finish _zle_line_finish

# End tricks
##############################################################################

## Prompt
cur_git_branch() {
  git branch --no-color 2>/dev/null|awk '/^\* ([^ ]*)/ {b=$2} END {if (b) {print "[" b "]"}}'
}

setopt PROMPT_SUBST
case $TERM in
  xterm*|rxvt*|screen|Apple_Terminal)
    PROMPT=$(echo '%{\e]0;%n@%m: %~\a\e[%(?.32.31)m%}%# %{\e[m%}')
    RPROMPT=$(echo '$(cur_git_branch) %{\e[32m%}%3~ %{\e[m%}%U%T%u')

    # Echo current process name in the xterm title bar
    preexec () {
	  #set_proxies
      print -Pn "\e]0;$1\a"
    }
    ;;
  *)
    PROMPT="[%n@%m] %# "
    ;;
esac

set ignoreeof off

export LS_COLORS="exfxcxdxbxegedabagacad"
ZLS_COLORS=$LS_COLORS


# Aliases
alias psg='ps ax|grep'
alias :q=exit
alias e='emacsclient -n'   #'open -b org.gnu.Emacs'
alias et='emacsclient -t'
alias ls='ls -G'
alias gzip=pigz
alias gunzip=unpigz

range() { for (( i = $1; $i < $2; i = $i + 1 )); do echo $i; done; unset i; }

add() {
  j=0
  while [ "$1" ]; do
    j=$(( $j + $1 ))
    shift
  done
  echo $j
  unset i
}

wff() { while test \! -f $1; do sleep 1; done; }

alias tailf="tail -f"

export LESS='-R'

export GREP_OPTIONS="--colour=auto --directories=skip"
export GREP_COLOR='1;33'

alias ocaml="rlwrap ocaml"

pgwatch() {
  watch -n 30 "echo 'select * from pg_stat_activity;'|psql -U postgres"
}

#set_proxies

netlocation() {
  scselect 2>&1|gawk 'match($0,"^ \\*.*\\((.*)\\)",a) { print a[1]; }'
}

# chflags nohidden ~/Library
alias cdg='cd $(git rev-parse --show-cdup)'

# https://gist.github.com/piscisaureus/3342247
function pullify() {
  git config --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*'
}

function grabfork () {
  repo=$1
  upstream=$2
  cd ~/Projects/External
  git clone git@github.com:purcell/$repo.git
  cd $repo
  git remote add $upstream git://github.com/$upstream/$repo.git
}

function randommac() {
  ruby -e 'puts ("%02x"%((rand 64)*4|2))+(0..4).inject(""){|s,x|s+":%02x"%(rand 256)}'
}

alias no_wireless_disconnect_on_logout='cd /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources && sudo ./airport en0 prefs DisconnectOnLogout=NO'

alias codereview='git log --format="[`git branch|grep \*|cut -c3-` %h] %s" origin/master...'
alias be="bundle exec"

# Pin, save a dir for later
alias pin="pwd > ${HOME}/.pindir"

# Quick nav to pin dir with cdd
function cdd() {
  if [ -e ${HOME}/.pindir ]; then
    export pind=$(cat ${HOME}/.pindir)
    cd "$pind"
  fi
}
#
# Start terminal in pinned directory
cdd

# zsh settings local to current box
if [ -e ${HOME}/.zshrc.local ]; then
  source ${HOME}/.zshrc.local
fi

function rehash() {
  source ${HOME}/.zshrc
}

# If rbenv exists, init shims autocompletion
if which rbenv > /dev/null; then
  eval "$(rbenv init -)";
fi

# FZF is awesome
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Make the delete key do the right thing
bindkey "^[[3~"  delete-char
bindkey "^[3;5~" delete-char

# Sometimes I do this, but it's _not_ the best for an interactive shell
# bindkey -v # Terminal vim mode
# bindkey '^R' history-incremental-search-backward
