" .vimrc configuration file
" Copyright (C) 2015 Matthew B. Gray
"
" This program is free software: you can redistribute it and/or modify
" it under the terms of the GNU General Public License as published by
" the Free Software Foundation, either version 3 of the License, or
" (at your option) any later version.
"
" This program is distributed in the hope that it will be useful,
" but WITHOUT ANY WARRANTY; without even the implied warranty of
" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
" GNU General Public License for more details.
"
" You should have received a copy of the GNU General Public License
" along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax enable       " enable syntax highlighting
set nocompatible    " be iMproved, required for vundle
filetype off        " required for vundle

"----------------------------------------
" Setting up Vundle, vim plugin manager
let iCanHazVundle=0
let vundle_readme=expand('~/.vim/bundle/Vundle.vim/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    let iCanHazVundle=1
endif

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" General
Plugin 'theflimflam/vim-unclutter'
"Plugin 'theflimflam/vim-common'
Plugin 'theflimflam/vim-visible-whitespace'
Plugin 'theflimflam/vim-execute-in-split'

" Productivity
Plugin 'matchit.zip'
Plugin 'fisadev/FixedTaskList.vim'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'tpope/vim-surround'
Plugin 'roman/golden-ratio'
let g:golden_ratio_autocommand = 0
nmap <silent> <C-w>- :GoldenRatioResize<CR>
Plugin 'vim-scripts/Align'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'mattn/emmet-vim'
Plugin 'YankRing.vim'

" Code
Plugin 'vim-scripts/jshint.vim'
Plugin 'scrooloose/syntastic'
let g:syntastic_javascript_checkers = ['jshint']
Plugin 'fatih/vim-go'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-rails'
"Plugin 'thoughtbot/vim-rspec' TODO

" Ruby block objects
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'

Plugin 'claco/jasmine.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0 " Don't hide quotes in json files

" exuberant ctags fu
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'majutsushi/tagbar'

" toggle tagbar, focus on open
map <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

Plugin 'tpope/vim-fugitive'
Plugin 'mattn/gist-vim'

" Javascript parsing engine
Plugin 'marijnh/tern_for_vim'
if executable("npm")
  let tern_path = $HOME . "/.vim/bundle/tern_for_vim"
  if isdirectory(tern_path)
    silent !("cd ".tern_path." && npm install")
  endif
endif

" Fuzzy finder
Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = ',e'
nmap ,g :CtrlPBufTag<CR>
nmap ,G :CtrlPBufTagAll<CR>
nmap ,f :CtrlPLine<CR>
nmap ,m :CtrlPMRUFiles<CR>
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',
  \ 'file': '\.pyc$\|\.pyo$|\.class$|\.min\..*\.js',
  \ }

" Writing prose
Plugin 'tpope/vim-markdown'
Plugin 'reedes/vim-pencil'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init({'wrap': 'soft'})
  autocmd FileType text         call pencil#init({'wrap': 'soft'})
augroup END

call vundle#end()            " required
filetype plugin indent on    " required

" solarized is only ready after vundle#end()
colorscheme solarized
set background=dark

" load my registers
if filereadable($HOME . '/.vimregisters')
    rviminfo! $HOME/.vimregisters
endif

" Source local configuration files if available
if filereadable($HOME . '/.vimrc.local')
    source $HOME/.vimrc.local
endif

" For vim stuff local to the host you're on
if filereadable("/etc/vim/vimrc.local")
    source /etc/vim/vimrc.local
endif

" If we're in a fresh vim, under $HOME
" AND there is a pinned directory present
"   THEN Change to this directory
if filereadable($HOME . "/.pindir") && getcwd() == $HOME
    let pindir_lines = readfile($HOME . "/.pindir")
    if len(pindir_lines) > 0
      exe "chdir " . pindir_lines[0]
    endif

    " If you've got a buffer open
    " chdir to this buffer
    " It might be more interesting to do this only if
endif

if iCanHazVundle == 1
    echo "Install plugins, reload vim"
    :BundleInstall
    :source $HOME/.vimrc
endif

" TODO find a way to do this generically
" Plugin?
set dictionary=/usr/share/dict/words

" Filetype switcher
"use ,t to change filetype
map ,tt :set filetype=text<CR>
map ,tm :set filetype=markdown<CR>
map ,tp :set filetype=perl<CR>
map ,th :set filetype=eruby<CR>
map ,tr :set filetype=ruby<CR>
map ,ts :set filetype=sql<CR>
map ,tx :set filetype=xml<CR>
map ,tj :set filetype=javascript<CR>
map ,ts :set filetype=sass<CR>
map ,tl :set filetype=less<CR>
map ,tv :set filetype=vim<CR>

" bind ,s to spellcheck
map ,s <Esc>:!aspell -c --dont-backup "%"<CR>:e! "%"<CR><CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" turn off EX mode (it annoys me, I don't use it)
":map Q <Nop>
" Shuffle paragraphs, don't use Q for ex mode (it's annoying to trigger)
" - http://alols.github.io/2012/11/07/writing-prose-with-vim/
map Q gqap

" save as sudo
ca w!! w !sudo tee "%"

" Spellcheck with ,s
map ,s <Esc>:!aspell -c --dont-backup "%"<CR>:e! "%"<CR><CR>

" Non chorded splits
set wmh=0               " <-- don't show contents of windows, just stack em
map <C-J> <C-W>j<C-W>-  " <-- golden ratio
map <C-K> <C-W>k<C-W>-
map <C-L> <C-W>l<C-W>-
map <C-H> <C-W>h<C-W>-

" Control C is copy (like copy paste-a)
map <C-c> "+y<CR>

set relativenumber
