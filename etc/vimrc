" .vimrc configuration file
" Copyright (C) 2015 Matthew B. Gray
"
" This program is free software: you can redistribute it and/or modify
" it under the terms of the GNU General Public License as published by
" the Free Software Foundation, either version 3 of the License, or
" (at your option) any later version.
"
" This program is distributed in the hope that it will be useful,
" but WITHOUT ANY WARRANTY; without even the implied warranty of
" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
" GNU General Public License for more details.
"
" You should have received a copy of the GNU General Public License
" along with this program.  If not, see <http://www.gnu.org/licenses/>.

let mapleader = ","

syntax enable       " enable syntax highlighting
set nocompatible    " be iMproved, required for vundle
filetype off        " required for vundle

"----------------------------------------
" Setting up Vundle, vim plugin manager
let plug_executable=expand('~/.vim/autoload/plug.vim')
if !filereadable(plug_executable)
    echo "Installing plug"
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin()

" let Vundle manage Vundle, required
Plug 'gmarik/Vundle.vim'

" General
Plug 'theflimflam/vim-unclutter'
Plug 'theflimflam/vim-visible-whitespace'

" Productivity
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-surround'
Plug 'roman/golden-ratio'
let g:golden_ratio_autocommand = 0
nmap <silent> <C-w>- :GoldenRatioResize<CR>
"Plug 'vim-scripts/Align'
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'mattn/emmet-vim'
Plug 'YankRing.vim'

" Code
Plug 'scrooloose/syntastic'
let g:syntastic_javascript_checkers = ['eslint']
Plug 'fatih/vim-go'
Plug 'altercation/vim-colors-solarized'
Plug 'tpope/vim-rails'
Plug 'nelstrom/vim-textobj-rubyblock' | Plug 'kana/vim-textobj-user'

Plug 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0 " Don't hide quotes in json files

" exuberant ctags fu
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'

Plug 'tpope/vim-fugitive'
Plug 'mattn/gist-vim'

" Fuzzy finder
Plug 'kien/ctrlp.vim'
let g:ctrlp_map = ',e'
nmap ,g :CtrlPBufTag<CR>
nmap ,G :CtrlPBufTagAll<CR>
nmap ,f :CtrlPLine<CR>
nmap ,m :CtrlPMRUFiles<CR>
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',
  \ 'file': '\.pyc$\|\.pyo$|\.class$|\.min\..*\.js',
  \ }

" Writing prose
Plug 'tpope/vim-markdown'
Plug 'reedes/vim-pencil'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init({'wrap': 'soft'})
  autocmd FileType text         call pencil#init({'wrap': 'soft'})
augroup END

call plug#end()           " required
filetype plugin indent on " required

let plugins_dir=expand('~/.vim/plugged')
if !isdirectory(plugins_dir)
    echo "Installing plugins, reloading vim"
    silent PlugInstall
    silent source $HOME/.vimrc
endif

" solarized is only ready after vundle#end()
colorscheme solarized
set background=dark

" load my registers
if filereadable($HOME . '/.vimregisters')
    rviminfo! $HOME/.vimregisters
endif

" Source local configuration files if available
if filereadable($HOME . '/.vimrc.local')
    source $HOME/.vimrc.local
endif

" For vim stuff local to the host you're on
if filereadable("/etc/vim/vimrc.local")
    source /etc/vim/vimrc.local
endif

" If we're in a fresh vim, under $HOME
" AND there is a pinned directory present
"   THEN Change to this directory
if filereadable($HOME . "/.pindir") && getcwd() == $HOME
    let pindir_lines = readfile($HOME . "/.pindir")
    if len(pindir_lines) > 0
      exe "chdir " . pindir_lines[0]
    endif

    " If you've got a buffer open
    " chdir to this buffer
    " It might be more interesting to do this only if
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TODO find a way to do this generically
set dictionary=/usr/share/dict/words
" TODO merge these two?
map ,s <Esc>:!aspell -c --dont-backup "%"<CR>:e! "%"<CR><CR>

" Filetype switcher
"use ,t to change filetype
nmap <leader>tt :set filetype=text<CR>
nmap <leader>tm :set filetype=markdown<CR>
nmap <leader>tp :set filetype=perl<CR>
nmap <leader>th :set filetype=eruby<CR>
nmap <leader>tr :set filetype=ruby<CR>
nmap <leader>ts :set filetype=sql<CR>
nmap <leader>tx :set filetype=xml<CR>
nmap <leader>tj :set filetype=javascript<CR>
nmap <leader>ts :set filetype=sass<CR>
nmap <leader>tl :set filetype=less<CR>
nmap <leader>tv :set filetype=vim<CR>

set wildmode=list:longest,full " Cool tab completion stuff, but ctrl+n that shit
set backspace=2                " Backspace rolls up new lines and removes tabs
set nohidden                   " CLOSE THE BUFFER when you close the tab.
set autoread                   " When someone modifies a file externally, autoread it back in
set pastetoggle=<F9>           " Paste Mode! Dang!

set scrolloff=3                " when scrolling, keep cursor 3 lines away from screen border
set foldmethod=manual          " Easier to manage this myself imho
set scrolloff=3                " when scrolling, keep cursor 3 lines away from screen border
set spl=en spell               " Use english for spellchecking,
set nospell                    " ...don't spellcheck by default

set showmatch                  " Show matching brackets.
set mat=2                      " ...but only blink the match for 200 ms

set hlsearch                   " Highlight my searches :)
set ignorecase                 " Do case insensitive matching.
set smartcase                  " Do smart case matching.
set incsearch                  " Incremental search.
set magic                      " Allows pattern matching with special characters

set expandtab                  " Pressing tab inserts spaces
set autoindent                 " indent on newlines
set smartindent                " recognise syntax of files
set tabstop=2                  " 2 spaces per tab
set softtabstop=2              " 2 spaces per tab
set shiftwidth=2               " 2 spaces per tab

autocmd Filetype perl setlocal ts=4 sts=4 sw=4

" Quickfix window when shelling out to grep
" Also works for Git grep
"   e.g. :Ggrep FIXME
"   see https://github.com/tpope/vim-fugitive
autocmd QuickFixCmdPost *grep* cwindow

" Autojump to last position VIM was at when opening a file.
" See --> http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
"
" Tell vim to remember certain things when we exit
" '10  :  marks will be remembered for up to 10 previously edited files
" "100 :  will save up to 100 lines for each register
" :20  :  up to 20 lines of command-line history will be remembered
" %    :  saves and restores the buffer list
" n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.vim/info

" On git commit, position cursor at the top
autocmd BufReadPost COMMIT_EDITMSG exe "normal! gg"

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nmap N Nzz
nmap n nzz

" turn off EX mode (it annoys me, I don't use it)
":map Q <Nop>
" More usefully, reformat paragraphs with vim rules
" - http://alols.github.io/2012/11/07/writing-prose-with-vim/
map Q gqap

" save with sudo
ca w!! w !sudo tee "%"

" Non chorded splits
set wmh=0               " <-- don't show contents of windows, just stack em
nmap <C-J> <C-W>j<C-W>-  " <-- golden ratio after movement
nmap <C-K> <C-W>k<C-W>-
nmap <C-L> <C-W>l<C-W>-
nmap <C-H> <C-W>h<C-W>-

" Control C is copy (like copy paste-a)
"nmap <C-c> "+y<CR>

set relativenumber

" For code reviews, human readability etc.
nmap <F8> :set nolist<CR> :set number<CR> :set nu<CR>
