#!/usr/bin/env ruby

class Side < Data.define(:value, :weight)
end

class Dice
  def initialize(sides)
    @sides = sides
    @weight_sum = sides.map(&:weight).sum
  end

  def roll
    threshold = rand(@weight_sum)
    @sides.each do |side|
      threshold = threshold - side.weight
      if threshold <= 0
        return side.value
      end
    end
    raise "Invalid state, ran out of sides ;_;"
  end
end

class Dictionary
  def initialize(letters, dice)
    raise "Cannot roll without letters" unless letters.length > 0
    @letters = letters
    @dice = dice
  end

  def next_word
    word = ""
    letter_count = @dice.roll
    while letter_count >= 0 do
      word += @letters.sample(letter_count).join
      letter_count = letter_count - word.length
    end
    word
  end
end

# Based on rounded word count from 3 refreshes of Peter's Online Typing course
# see https://www.typing-lessons.org/lesson_1.html
dice = Dice.new([
  Side.new(value: 4, weight: 5),  # 4 letter words 5% of the time
  Side.new(value: 3, weight: 60), # 3 letter words 60% of the time
  Side.new(value: 2, weight: 30), # 2 letter words 30% of the time
  Side.new(value: 1, weight: 5),  # 1 letter words 5% of the time
])

# Custom keys are input, i.e. press home row to practice home row
# see https://sites.google.com/alanreiser.com/handsdown/home/hands-down-neu
letters = Set.new(ARGV.first.chars)

dictionary = Dictionary.new(letters.to_a, dice)
puts 50.times.map { dictionary.next_word }.join(" ")
